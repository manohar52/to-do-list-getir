{"version":3,"sources":["api/config.js","components/TaskDetail.js","api/taskApi.js","actions/task.js","components/ConfirmDialog.js","components/TaskList.js","AppRouter.js","reducers/task.js","store/configureStore.js","App.js","index.js"],"names":["apiClient","axios","create","baseURL","get","post","put","remove","delete","TaskDetail","task","showDetail","setShowDetail","useState","taskName","setTaskName","isComplete","taskComplete","setTaskComplete","dispatch","useDispatch","enqueueSnackbar","useSnackbar","useEffect","name","handleUpdateTask","_id","updateTask","then","response","type","data","editTask","variant","catch","error","handleCreateNewTask","createNewTask","addNewTask","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","TextField","required","id","label","onChange","event","target","value","defaultValue","FormControlLabel","control","Switch","checked","labelPlacement","DialogActions","Button","onClick","ConfirmDialog","handleYes","showConf","setShowConf","useStyles","makeStyles","container","marginLeft","marginRight","width","cursor","backgroundColor","connect","state","isLoading","tasks","currentTask","setCurrentTask","handleDeleteTask","removeTask","classes","CircularProgress","className","Typography","Divider","map","key","Grid","spacing","item","xs","Tooltip","title","IconButton","style","marginTop","fontSize","Paper","margin","color","history","createHashHistory","AppRouter","to","component","TaskList","exact","initState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","push","task_index","findIndex","updTasks","filter","applyMiddleware","thunk","res","erroredTasks","App","anchorOrigin","vertical","horizontal","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7060885f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: \"http://localhost:4000/\" \r\n});\r\n\r\nconst { get, post, put, delete: remove } = apiClient;\r\nexport { get, post, put, remove };\r\n\r\n","import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent, DialogTitle, FormControlLabel, Switch, TextField\r\n} from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createNewTask, updateTask } from '../api/taskApi';\r\nimport { useSnackbar } from 'notistack';\r\nimport { addNewTask, editTask } from '../actions/task';\r\n\r\nconst TaskDetail = ({ task, showDetail, setShowDetail }) => {\r\n    const [taskName, setTaskName] = useState('')\r\n    const [taskComplete, setTaskComplete] = useState(task?.isComplete || false)\r\n    const dispatch = useDispatch()\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        if (task) {\r\n            setTaskName(task?.name)\r\n            setTaskComplete(task?.isComplete)\r\n        }\r\n        else {\r\n            setTaskName('')\r\n            setTaskComplete(false)\r\n        }\r\n    }, [task])\r\n\r\n    const handleUpdateTask = () => {\r\n        if (taskName != '') {\r\n            updateTask({ ...task, name: taskName, isComplete: taskComplete })\r\n                .then((response) => {\r\n                    dispatch(editTask(response.data))\r\n                    setShowDetail(false)\r\n                    enqueueSnackbar(\"Task updated!\", {\r\n                        variant: \"success\",\r\n                    });\r\n                })\r\n                .catch((error) => {\r\n                    enqueueSnackbar(error, {\r\n                        variant: \"error\",\r\n                    });\r\n                })\r\n        }\r\n        else {\r\n            enqueueSnackbar(\"Task Name is required\", {\r\n                variant: \"error\",\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleCreateNewTask = () => {\r\n        if (taskName != '') {\r\n            createNewTask({ name: taskName, isComplete: taskComplete })\r\n                .then((response) => {\r\n                    dispatch(addNewTask(response.data))\r\n                    setShowDetail(false)\r\n                    enqueueSnackbar(\"Task created!\", {\r\n                        variant: \"success\",\r\n                    });\r\n                })\r\n                .catch((error) => {\r\n                    enqueueSnackbar(error, {\r\n                        variant: \"error\",\r\n                    });\r\n                })\r\n        }\r\n        else {\r\n            enqueueSnackbar(\"Task Name is required\", {\r\n                variant: \"error\",\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <Dialog\r\n            open={showDetail}\r\n            onClose={() => setShowDetail(false)}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\">\r\n            <DialogTitle>Task Detail</DialogTitle>\r\n            <DialogContent>\r\n                <div>\r\n                    <TextField\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        label=\"Task Name\"\r\n                        onChange={event => setTaskName(event.target.value)}\r\n                        defaultValue={taskName} />\r\n                    <br />\r\n                    <br />\r\n                    <div>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={taskComplete}\r\n                                    onChange={() => setTaskComplete(!taskComplete)} />\r\n                            }\r\n                            label={\"Complete\"}\r\n                            labelPlacement={\"start\"}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {task ?\r\n                    <Button onClick={() => handleUpdateTask()}>Update</Button>\r\n                    :\r\n                    <Button onClick={() => handleCreateNewTask()}>Create</Button>}\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default TaskDetail;","import { get, post, put, remove } from './config'\r\n\r\nexport const getAllTasks = () => {\r\n    return get('/tasks/');\r\n}\r\n\r\nexport const createNewTask = (task) => {\r\n    return post('/tasks', task)\r\n}\r\n\r\nexport const updateTask = (task) => {\r\n    return put(`/tasks/${task._id}`, task)\r\n}\r\n\r\nexport const deleteTask = (task) => {\r\n    return remove(`/tasks/${task._id}`)\r\n}","import { getAllTasks } from '../api/taskApi';\r\n\r\nexport const loadingTasks = () => ({\r\n    type: 'LOADING_TASKS',\r\n    data: []\r\n})\r\n\r\nexport const loadedTasks = (tasks) => ({\r\n    type: 'LOADED_TASKS',\r\n    data: tasks\r\n})\r\n\r\nexport const erroredTasks = (error) => ({\r\n    type: 'ERROR_TASKS',\r\n    data: error\r\n})\r\n\r\nexport const addNewTask = (task) => ({\r\n    type: 'ADD_NEW',\r\n    data: task\r\n})\r\n\r\nexport const editTask = (task) => ({\r\n    type: 'UPDATE_TASK',\r\n    data: task\r\n})\r\n\r\nexport const removeTask = (task) => ({\r\n    type: 'DELETE_TASK',\r\n    data: task\r\n})\r\n\r\nexport const loadTasks = () => (dispatch) => {\r\n    dispatch(loadingTasks())\r\n    getAllTasks()\r\n        .then((res) => {\r\n            dispatch(loadedTasks(res.data))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(erroredTasks(error))\r\n        })\r\n\r\n}","import { Button, Dialog, DialogActions, DialogContent, DialogTitle } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst ConfirmDialog = ({ handleYes, showConf, setShowConf }) => {\r\n    return (\r\n        <Dialog open={showConf}\r\n            onClose={() => setShowConf(false)}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\">\r\n            <DialogTitle>Confirmation</DialogTitle>\r\n            <DialogContent>\r\n                Are you sure you want to continue?\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button variant=\"primary\" onClick={() => handleYes()}>Proceed</Button>\r\n                <Button onClick={() => setShowConf(false)}>Cancel</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default ConfirmDialog;","import { Paper, CircularProgress, Grid, Button, IconButton, Tooltip, Divider } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { makeStyles, Typography } from '@material-ui/core';\r\nimport TaskDetail from './TaskDetail';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ConfirmDialog from './ConfirmDialog';\r\nimport { deleteTask } from '../api/taskApi';\r\nimport { useSnackbar } from 'notistack';\r\nimport { removeTask } from '../actions/task';\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        width: \"30em\"\r\n    },\r\n    task: {\r\n        \"&:hover\": {\r\n            cursor: \"pointer\",\r\n            backgroundColor: \"grey\"\r\n        },\r\n    }\r\n})\r\n\r\nconst TaskList = ({ isLoading, tasks, error }) => {\r\n    const [showDetail, setShowDetail] = useState(false);\r\n    const [currentTask, setCurrentTask] = useState(null)\r\n    const [showConf, setShowConf] = useState(false)\r\n    const { enqueueSnackbar } = useSnackbar()\r\n    const dispatch = useDispatch()\r\n\r\n    const handleDeleteTask = () => {\r\n        if (currentTask) {\r\n            deleteTask(currentTask)\r\n                .then((response) => {\r\n                    dispatch(removeTask(response.data))\r\n                    enqueueSnackbar(\"Task deleted!\", {\r\n                        variant: \"success\",\r\n                    });\r\n                })\r\n                .catch((error) => {\r\n                    enqueueSnackbar(error, {\r\n                        variant: \"error\",\r\n                    });\r\n                })\r\n        }\r\n        setShowConf(false)\r\n    }\r\n\r\n    const classes = useStyles()\r\n    if (error) {\r\n        return <p>Unable to load data</p>\r\n    }\r\n\r\n    if (isLoading) {\r\n        return <CircularProgress />\r\n    }\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <Typography variant={'h3'}>To-do List</Typography>\r\n            <Divider /><br />\r\n            <Button variant=\"contained\" onClick={() => {\r\n                setCurrentTask(null)\r\n                setShowDetail(true)\r\n            }}>Create new task</Button>\r\n            {tasks.map((task) => (\r\n                <div key={task?._id}>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={1}>\r\n                            <Tooltip title={'Remove Task'}>\r\n                                <IconButton style={{ marginTop: \"0.75em\" }}\r\n                                    onClick={() => {\r\n                                        setCurrentTask(task)\r\n                                        setShowConf(true)\r\n                                    }}>\r\n                                    <DeleteIcon fontSize='small' />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Grid>\r\n                        <Grid item xs={11}>\r\n                            <Paper className={classes.task} onClick={() => {\r\n                                setCurrentTask(task)\r\n                                setShowDetail(true)\r\n                            }}>\r\n                                <Grid style={{ margin: \"1em\" }} container spacing={2}>\r\n                                    <Grid item xs={10}>\r\n                                        {task?.name}\r\n                                    </Grid>\r\n                                    <Grid item xs={2}>\r\n                                        {task?.isComplete ? <CheckCircleIcon style={{ color: \"green\" }} /> : <WarningIcon style={{ color: \"yellow\" }} />}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            ))}\r\n            <TaskDetail\r\n                task={currentTask}\r\n                showDetail={showDetail}\r\n                setShowDetail={setShowDetail} />\r\n            <ConfirmDialog\r\n                handleYes={() => handleDeleteTask()}\r\n                showConf={showConf}\r\n                setShowConf={setShowConf} />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isLoading: state.isLoading,\r\n    tasks: state.tasks,\r\n    error: state.error\r\n});\r\n\r\nexport default connect(mapStateToProps)(TaskList);","import { createHashHistory } from 'history';\r\nimport React from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport TaskList from './components/TaskList';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport const history = createHashHistory();\r\nconst AppRouter = () => {\r\n    // const dispatch = useDispatch()\r\n    // dispatch(loadTasks())\r\n\r\n    return (\r\n        < HashRouter history={history} >\r\n            <div>\r\n                <Switch>\r\n                    <Route to=\"/\" component={TaskList} exact />\r\n                </Switch>\r\n            </div>\r\n        </HashRouter >\r\n    )\r\n}\r\nexport default AppRouter;","const initState = {\r\n    isLoading: true,\r\n    tasks: [],\r\n    error: null\r\n}\r\nexport default (state = initState, { type, data }) => {\r\n    switch (type) {\r\n        case 'LOADING_TASKS':\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case 'LOADED_TASKS':\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                tasks: data\r\n            }\r\n        case 'ERROR_TASKS':\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: data\r\n            }\r\n        case 'ADD_NEW':\r\n            state.tasks.push(data)\r\n            return state\r\n        case 'UPDATE_TASK':\r\n            const task_index = state.tasks.findIndex(task => task._id === data._id)\r\n            state.tasks[task_index] = data\r\n            return state\r\n        case 'DELETE_TASK':\r\n            const updTasks = state.tasks.filter(task => task._id !== data._id)\r\n            return {\r\n                ...state,\r\n                tasks: updTasks\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { applyMiddleware, compose, createStore } from \"redux\";\r\nimport task from \"../reducers/task\";\r\nimport thunk from 'redux-thunk'\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(task, composeEnhancers(applyMiddleware(thunk)))\r\n\r\nexport default store","import './App.css';\nimport React from 'react'\nimport AppRouter from './AppRouter';\nimport { Provider } from 'react-redux';\nimport store from './store/configureStore';\nimport { loadTasks } from './actions/task';\nimport { SnackbarProvider } from 'notistack';\n\nstore.dispatch(loadTasks())\nfunction App() {\n  return (\n    <div>\n      <Provider store={store}>\n        <SnackbarProvider\n          anchorOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }}>\n          <AppRouter />\n        </SnackbarProvider>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}